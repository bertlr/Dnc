/*
 * Copyright (C) 2014 by Herbert Roider <herbert.roider@utanet.at>
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.roiderh.dnc.serial;

import java.awt.Color;

import jssc.SerialPort;
import jssc.SerialPortEvent;
import jssc.SerialPortEventListener;
import jssc.SerialNativeInterface;
import java.awt.event.*;
import javax.swing.Timer;
import javax.swing.text.BadLocationException;
import javax.swing.text.JTextComponent;
import jssc.SerialPortException;

/**
 *
 * @author Herbert Roider <herbert.roider@utanet.at>
 */
public class SerialJDialog extends javax.swing.JDialog implements SerialPortEventListener, ActionListener {

    private SerialPort serialPort;
    private javax.swing.text.Document document;
    /**
     * If the dialog is for receive date, this must be true, for sending false:
     */
    public boolean receive = true;
    private Timer t = new Timer(1000, this);
    /**
     * count of the received bytes
     */
    private int received_count = 0;
    /**
     * buffer with the text ready to sent
     */
    private byte[] sendBuffer;
    /**
     * count of the already sent bytes
     */
    private int current_send_pos = 0;
    private JTextComponent textComponent;

    /**
     * The serial port must be opened before call this function.
     *
     * @param s the port
     * @param doc the current document in the editor
     * @param r for receive from serial port, set this to true.
     */
    public void setPort(SerialPort s, JTextComponent ed, javax.swing.text.Document doc, boolean r) {
        t.start();
        this.serialPort = s;
        //this.receivedText = new String();
        this.jTextAreaReceive.setText("");
        this.document = doc;
        this.textComponent = ed;
        this.receive = r;
        this.received_count = 0;
        this.current_send_pos = 0;
        this.jLabelCts.setForeground(Color.LIGHT_GRAY);

        if (r == false) {
            String doc_string = "";
            try {
                doc_string = this.document.getText(0, this.document.getLength());
            } catch (Exception ex) {
                System.out.println("cannot read document: " + ex.getMessage());
            }
            doc_string = doc_string.replace("\r", "");
            doc_string = doc_string.replace("\n", "\r\n");
            this.sendBuffer = doc_string.getBytes();
        }

    }

    /**
     * Creates new form NewJDialog
     */
    public SerialJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.serialPort = null;
        //this.receivedText = new String();
        this.document = null;
        //this.jLabelCts.setForeground(Color.LIGHT_GRAY);

        //Handle window closing correctly.
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent we) {
                clearAndHide();

            }

            @Override
            public void windowActivated(WindowEvent e) {
                // TODO Auto-generated method stub
                System.out.println("Window activated");
                if (receive == false) {
                    sendString();
                }
                //super.windowActivated(e);
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaReceive = new javax.swing.JTextArea();
        jLabelCts = new javax.swing.JLabel();
        jButtonClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(SerialJDialog.class, "SerialJDialog.title")); // NOI18N

        jTextAreaReceive.setEditable(false);
        jTextAreaReceive.setColumns(20);
        jTextAreaReceive.setRows(5);
        jScrollPane1.setViewportView(jTextAreaReceive);

        org.openide.awt.Mnemonics.setLocalizedText(jLabelCts, org.openide.util.NbBundle.getMessage(SerialJDialog.class, "SerialJDialog.jLabelCts.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jButtonClose, org.openide.util.NbBundle.getMessage(SerialJDialog.class, "SerialJDialog.jButtonClose.text")); // NOI18N
        jButtonClose.setToolTipText(org.openide.util.NbBundle.getMessage(SerialJDialog.class, "SerialJDialog.jButtonClose.toolTipText")); // NOI18N
        jButtonClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelCts)
                            .addComponent(jButtonClose))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelCts)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonClose)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

        private void jButtonCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCloseActionPerformed
            // TODO add your handling code here:
            this.clearAndHide();

        }//GEN-LAST:event_jButtonCloseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SerialJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SerialJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SerialJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SerialJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SerialJDialog dialog = new SerialJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    @Override
    public void serialEvent(SerialPortEvent event) {
        if (event.isTXEMPTY()) {
//            int val = event.getEventValue();
//            System.out.println("SerialEvent TXEMPTY:" + Integer.toString(val));
//            if (this.receive == false) {
//                this.jLabelCts.setForeground(Color.red);
//                System.out.println("serialEvent pos: " + this.current_send_pos);
//                this.sendString();
//                this.textComponent.select(0, this.current_send_pos);
//
//            }
        } else if (event.isRXCHAR()) {//If data is available

            if (this.receive) {
                // The color shows incomming data
                this.jLabelCts.setForeground(Color.red);
                int bytes = event.getEventValue();
                System.out.println("SerialEvent RXCHAR anz=" + bytes);
                if (this.serialPort == null) {
                    return;
                }
                if (this.serialPort.isOpened() == false) {
                    return;
                }

                try {
                    byte buffer[] = serialPort.readBytes(bytes);
                    String readed = "";

                    for (int i = 0; i < buffer.length; i++) {
                        if (buffer[i] == 0) {
                            continue;
                        }
                        if (SerialNativeInterface.getOsType() == SerialNativeInterface.OS_LINUX || SerialNativeInterface.getOsType() == SerialNativeInterface.OS_MAC_OS_X) {
                            if (buffer[i] == 13) { // "\r"
                                continue;
                            }

                        }
                        readed += (char) buffer[i];
                    }

                    this.document.insertString(this.document.getLength(), readed, null);
                    this.received_count += readed.length();
                } catch (Exception ex) {
                    System.out.println(ex);
                }
            } else {
                int bytes = event.getEventValue();
                // emty the buffer because the last character stay in the buffer. At the next receive this character is received. Don't know why.
                try {
                    byte buffer[] = serialPort.readBytes(bytes);
                } catch (SerialPortException ex) {
                    System.out.println(ex.getMessage());
                }
                System.out.println("SerialEvent RXCHAR when sending:" + Integer.toString(bytes));

                this.jLabelCts.setForeground(Color.red);
                System.out.println("serialEvent pos: " + this.current_send_pos);
                
                this.sendString();
                this.textComponent.select(0, this.current_send_pos);

            }
        } else if (event.isCTS()) {//If CTS (clear to send) line has changed state
//            if (event.getEventValue() == 1) {//If line is ON
//            } else {
//            }
        } else if (event.isDSR()) {///If DSR (data set ready) line has changed state
//            if (event.getEventValue() == 1) {//If line is ON
//            } else {
//            }
        } else if (event.isBREAK()) {
//            System.out.println("break");
//
        } else if (event.isERR()) {
            //System.out.println("Error " + event.getEventValue());
        } else if (event.isRING()) {
            //System.out.println("Ring " + event.getEventValue());
        } else if (event.isRLSD()) {
            //System.out.println("RLSD " + event.getEventValue());
        } else if (event.isRXFLAG()) {
            //System.out.println("RXFlag " + event.getEventValue());
        }
    }

    /**
     * Called by a timer every second. switch the color of the Text to green
     * every second. This shows there is no incomming data.
     *
     * @param e
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == t) {
            this.jLabelCts.setForeground(Color.LIGHT_GRAY);
            if (this.receive) {
                this.jTextAreaReceive.setText("received: " + Integer.toString(this.received_count));
            } else {
                this.jTextAreaReceive.setText("sent: " + Integer.toString(this.current_send_pos));
            }
        }

    }

    /**
     * This stop the timer and hides it.
     */
    public void clearAndHide() {
        t.stop();
        setVisible(false);
    }

    /**
     * Sends only one byte.
     *
     * @param begin position in the string to send
     * @return
     */
    private int sendString() {
    
        try {
            if(this.current_send_pos < this.sendBuffer.length) {
                this.serialPort.writeByte(this.sendBuffer[this.current_send_pos]);
                this.current_send_pos++;
            }
        } catch (SerialPortException ex) {
            System.out.println("Error at writeByte: " + ex.getMessage());
        }
        
        return this.current_send_pos;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonClose;
    private javax.swing.JLabel jLabelCts;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaReceive;
    // End of variables declaration//GEN-END:variables
}
